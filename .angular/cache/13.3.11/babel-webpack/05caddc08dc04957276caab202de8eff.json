{"ast":null,"code":"import { IModalConfig } from '../interfaces/modal-config.interface';\nimport { ModalInjector } from '../injectors/modal-injector';\nimport { ModalActivoRef } from '../modal-activo-ref';\nimport { ContenedorModalComponent } from '../components/contenedor-modal/contenedor-modal.component';\nimport { take } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let ModalService = /*#__PURE__*/(() => {\n  class ModalService {\n    constructor(componentFactoryResolver, appRef, injector, router) {\n      this.componentFactoryResolver = componentFactoryResolver;\n      this.appRef = appRef;\n      this.injector = injector;\n      this.router = router;\n      this.contenedoresModalComponentRef = [];\n    }\n\n    suscribtionOnRouterChange() {\n      this.router.events.pipe(take(1)).subscribe(() => {\n        var _a;\n\n        console.log('router change');\n        (_a = this.contenedoresModalComponentRef) === null || _a === void 0 ? void 0 : _a.forEach(c => {\n          c.instance.cerrar();\n        });\n      });\n    }\n\n    abrir(componente, config = {}) {\n      config = Object.assign({\n        ancho: 'auto',\n        alto: 'auto',\n        cerrarConClickFueraDelModal: true\n      }, config);\n      const modalActivoRef = this.agregarModalComponentAlBody(config);\n      this.contenedoresModalComponentRef[this.contenedoresModalComponentRef.length - 1].instance.cargarComponenteHijo(componente);\n      this.contenedoresModalComponentRef[this.contenedoresModalComponentRef.length - 1].instance.config = config;\n      modalActivoRef.instancia = this.contenedoresModalComponentRef[this.contenedoresModalComponentRef.length - 1].instance.componenteRef.instance;\n      this.suscribtionOnRouterChange();\n      return modalActivoRef;\n    }\n\n    agregarModalComponentAlBody(config) {\n      config = Object.assign({}, config);\n      const map = new WeakMap();\n      map.set(IModalConfig, config);\n      const modalActivoRef = new ModalActivoRef();\n      map.set(ModalActivoRef, modalActivoRef);\n      const sub = modalActivoRef.respuesta$.subscribe({\n        next: () => {\n          this.eliminarModalComponentDelBody(modalActivoRef);\n          sub.unsubscribe();\n        },\n        error: () => {\n          this.eliminarModalComponentDelBody(modalActivoRef);\n          sub.unsubscribe();\n        }\n      });\n      const componentFactory = this.componentFactoryResolver.resolveComponentFactory(ContenedorModalComponent);\n      const componentRef = componentFactory.create(new ModalInjector(this.injector, map));\n      this.appRef.attachView(componentRef.hostView);\n      const domElem = componentRef.hostView.rootNodes[0];\n      document.body.appendChild(domElem);\n      this.contenedoresModalComponentRef.push(componentRef);\n      this.contenedoresModalComponentRef[this.contenedoresModalComponentRef.length - 1].instance.alCerrar$.subscribe(() => {\n        this.eliminarModalComponentDelBody(modalActivoRef);\n      });\n      return modalActivoRef;\n    }\n\n    eliminarModalComponentDelBody(modalRef) {\n      const index = this.contenedoresModalComponentRef.findIndex(c => c.instance.componenteRef.instance === modalRef.instancia);\n\n      if (index > -1) {\n        this.appRef.detachView(this.contenedoresModalComponentRef[index].hostView);\n        this.contenedoresModalComponentRef[index].destroy();\n        this.contenedoresModalComponentRef.splice(index, 1);\n      }\n    }\n\n  }\n\n  ModalService.ɵfac = function ModalService_Factory(t) {\n    return new (t || ModalService)(i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i0.ApplicationRef), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i1.Router));\n  };\n\n  ModalService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ModalService,\n    factory: ModalService.ɵfac\n  });\n  return ModalService;\n})();","map":null,"metadata":{},"sourceType":"module"}