{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let SettingsService = /*#__PURE__*/(() => {\n  class SettingsService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this._api$ = new BehaviorSubject(\"\");\n    }\n\n    get api$() {\n      return this._api$.asObservable();\n    }\n\n    get api() {\n      return this._api$.value;\n    }\n\n    get() {\n      this.httpClient.get(\"assets/server/appsettings.json\").subscribe(setting => {\n        try {\n          this._api$.next(setting === null || setting === void 0 ? void 0 : setting.api);\n        } catch (_a) {\n          console.log(\"Error de lectura en appsettings.json\");\n          console.log(\"Error de lectura en variable urlBase\");\n        }\n      }, error => {\n        console.log(\"No existe appsetting.json\", error);\n      });\n    }\n\n  }\n\n  SettingsService.ɵfac = function SettingsService_Factory(t) {\n    return new (t || SettingsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  SettingsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SettingsService,\n    factory: SettingsService.ɵfac\n  });\n  return SettingsService;\n})();","map":null,"metadata":{},"sourceType":"module"}